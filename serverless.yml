service: flaces-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  appName: flaces
  tableName: ${self:custom.stage}-${self:custom.appName}-projects
  userIndexName: userId-index
  userTableName: ${self:custom.stage}-${self:custom.appName}-users

provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    userIndexName: ${self:custom.userIndexName}
    userTableName: ${self:custom.userTableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - Fn::Join:
          - ''
          -
            - Fn::GetAtt: [UploadsBucket, Arn]
            - '/public/'

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /projects
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    # memorySize: 128
    timeout: 30
    events:
      - http:
          path: projects
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /projects/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: projects/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /projects
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: projects
          method: get
          cors: true
          authorizer: aws_iam

  listall:
    handler: listall.main
    events:
      - http:
          path: projects/all
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /projects/{id}
    # - method: PUT request
    handler: update.main
    timeout: 30
    events:
      - http:
          path: projects/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /projects/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: projects/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  createUser:
    handler: createUser.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  
  getUser:
    handler: getUser.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam

  # aggregateBikeData:
  #   handler: aggregateBikeData.main
  #   timeout: 30
  #   events:
  #     - schedule:
  #         rate: rate(120 minutes)
  #         enabled: false

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # Permissions
  - ${file(resources/permissions.yml)}

